#!/usr/bin/env python3
from os import listdir, mkdir, remove as rm, stat, symlink
from os.path import (
    basename,
    dirname,
    expanduser,
    isdir,
    islink,
    join as path_join,
    realpath,
    splitext,
)
from sqlite3 import connect as sqlite_connect
from tempfile import mkdtemp
import argparse
import datetime
import difflib
import logging
import math
import os
import re
import sys

from sh import (
    AtomicParsley as atomic,
    id3ted,
    mp3check,
    mp3splt,
)
import sh

FILE_URI_REGEX = re.compile(r'^file\://')
_log = logging.getLogger('itunes-lib-maker')


def get_clementine_db_file_path():
    paths = (expanduser('~/.config/Clementine-qt5/clementine.db'),
             expanduser('~/.config/Clementine/clementine.db'),)
    for path in paths:
        try:
            with open(path, 'rb'):
                return path
        except IOError:
            pass
    raise Exception('No Clementine database found')


class CandidateError(Exception):
    pass


class WritableDirectoryAction(argparse.Action):
    def _raise_if_invalid(self, prospective_dir):
        if not isdir(prospective_dir):
            raise argparse.ArgumentTypeError('%s is not a valid directory' % (
                prospective_dir,
            ))

        if not os.access(prospective_dir, os.W_OK):
            raise argparse.ArgumentTypeError('%s is not a readable directory' % (
                prospective_dir,
            ))

    def __call__(self, parser, namespace, values, option_string=None):
        dirs = values
        was_list = True
        new_list = []

        if type(values) is not list:
            values = [values]
            was_list = False

        for dn in values:
            self._raise_if_invalid(dn)
            new_list.append(realpath(dn))

        # Do not change behaviour of nargs, etc
        if not was_list:
            new_list = new_list[0]

        setattr(namespace, self.dest, new_list)


def splitcue(temp_dir, cuefile, mp3file, track):
    bnmp3 = basename(mp3file)
    mp3root, _ = splitext(bnmp3)
    candidate = path_join(temp_dir, '%s-%02d.mp3' % (mp3root, track,))

    try:
        with open(candidate, 'rb'):
            _log.debug('Found candidate')
            return candidate
    except IOError:
        _log.debug('Candidate split MP3 does not exist')
        pass

    mp3splt_args = ['-xKf', '-C', '8', '-T', '12', '-o' '%s-@n' % (mp3root,)]
    mp3splt_args += ['-d', temp_dir, '-c', cuefile, mp3file]

    _log.debug('mp3splt %s' % (' '.join(mp3splt_args),))
    out = mp3splt(mp3splt_args)
    _log.debug(out.strip())

    with open(candidate, 'rb'):
        return candidate

    raise CandidateError('Candidate file should have been returned')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument('-t', '--threshold', type=float, default=0.6)
    parser.add_argument('-m', '--max-size', type=int, help='Maximum size in GB', default=32)
    parser.add_argument('-v', '--verbose', action='store_true')
    parser.add_argument('-d', '--debug', action='store_true')
    parser.add_argument('--include-no-cover', action='store_true')
    parser.add_argument('--split-dir', action=WritableDirectoryAction, required=False)
    parser.add_argument('directory', nargs=1, action=WritableDirectoryAction)

    args = parser.parse_args()
    threshold = args.threshold
    outdir = args.directory[0]

    if outdir == args.split_dir:
        print('Split CUE cache directory cannot be same as output directory', file=sys.stderr)
        sys.exit(1)

    if args.verbose or args.debug:
        log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        formatter = logging.Formatter(log_format)
        channel = logging.StreamHandler(sys.stderr)

        level = logging.INFO
        if args.debug:
            level = logging.DEBUG

        _log.setLevel(level)
        channel.setLevel(level)
        channel.setFormatter(formatter)
        _log.addHandler(channel)

    old_listing = []
    new_listing = []

    _log.info('Cleaning out directory')
    for item in listdir(outdir):
        fn = path_join(outdir, item)
        old_listing.append(item)
        rm(fn)

    # TODO Detect OS and switch, blah
    db_file = get_clementine_db_file_path()

    files = []
    no_cover = []
    stream_failures = []
    ratings = []
    total_size = 0
    max_size = args.max_size * (1000 ** 3)  # Use SI as iOS/OS X does
    uniques = []
    splitdir = realpath(args.split_dir)

    conn = sqlite_connect(db_file)
    c = conn.cursor()
    c.execute('SELECT rating, artist, title, filename, track FROM songs '
              'WHERE rating >= ? AND '
              '(filename LIKE "%.mp3" OR filename LIKE "%.m4a") '
              'ORDER BY rating ASC',
              (threshold,))

    for rating, artist, title, filename, track in c.fetchall():
        filename = filename.decode('utf-8')
        filename = re.sub(FILE_URI_REGEX, '', filename)

        if filename in files:
            continue
        if (artist.lower(), title.lower(),) in uniques:
            continue

        try:
            with open(filename, 'rb') as f:
                pass
        except IOError:
            _log.error('Bad data in database. File not found or is not readable: %s' % (filename,))
            continue

        try:
            with open(filename[:-4] + '.cue', 'rb') as f:
                # Split the segment out of the MP3, very ugly
                tempdir = path_join(splitdir, basename(dirname(filename)))
                if not isdir(tempdir):
                    mkdir(tempdir)

                _log.info('Splitting track #%d (%s - \'%s\') out of %s (tempdir = %s)' % (track, artist, title, basename(filename), tempdir))

                # Only the filename variable has to change and the below code works
                filename = splitcue(tempdir, f.name, filename, track)
        except IOError:
            pass

        filesize = stat(filename).st_size
        cover_found = True

        with open(filename, 'rb') as f:
            if filename.endswith('.mp3'):
                data = id3ted(['-l', filename])
            elif filename.endswith('.m4a'):
                data = atomic([filename, '-t'])
            else:
                raise NotImplementedError(filename)

        try:
            data = data.stdout.decode('utf-8')
        except UnicodeDecodeError as e:
            _log.error('Data from tool for file %s failed to decode to UTF-8. Not including' % (filename,))
            _log.error(e.object)
            _log.error('Start: %d, End: %d, Reason: %s', e.start, e.end, e.reason)
            continue

        # Cover check
        if filename.endswith('.mp3') and 'APIC: image/jpeg' not in data:
            cover_found = False
        elif filename.endswith('.m4a') and 'Atom "covr" contains: ' not in data:
            cover_found = False
        if not cover_found and not args.include_no_cover:
            no_cover.append(filename)
            _log.warn('Cover check failed for %s. Skipping' % (filename,))
            continue

        # Stream check, -TY may make this useless?
        if filename.endswith('.mp3'):
            try:
                mp3check(['-e', '-GSBTY', filename])
            except sh.ErrorReturnCode_1 as e:
                if b'bytes of junk after last frame' in e.stdout:
                    pass
                else:
                    stream_failures.append(filename)
                    _log.error('Stream check failed for %s. Not including' % (filename,))
                    continue
        else:
            _log.debug('Stream checking for M4A not implemented yet (file: %s)' % (filename,))

        if total_size + filesize > max_size:
            _log.info('Hit limit for maximum total size of data')
            break

        total_size += filesize
        files.append(filename)
        new_listing.append(basename(filename))
        uniques.append((artist.lower(), title.lower(),))

        rating *= 5
        if rating > 5:
            rating = 5
        rating = math.trunc(rating)

        ratings.append((rating, basename(filename),))

    conn.close()

    _log.info('%.2f GB (%.2f GiB) of data found' % (total_size / (1000 ** 3), total_size / (1024 ** 3),),)
    for fn in files:
        out = path_join(outdir, basename(fn))
        _log.info('%s -> %s' % (fn, out,))
        try:
            symlink(fn, out)
        except FileExistsError:
            rm(out)
            symlink(fn, out)

    with open(path_join(outdir, '.timestamp'), 'w') as f:
        f.write('%s\n' % (datetime.datetime.today(),))

    with open(path_join(outdir, '.ratings'), 'w') as f:
        for rating, filename in ratings:
            f.write('%s %s\n' % (rating, filename,))

    if args.verbose:
        print('%s' % ('\n'.join(difflib.Differ().compare(sorted(old_listing), sorted(new_listing))),))
